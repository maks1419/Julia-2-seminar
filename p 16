function permutations(a::AbstractVector)
    n = length(a)
    p=collect(1:n)

    function next()
        perm_a = a[p]
        p = next_permute!(p)
        return perm_a
    end

    return (next() for _ in 1:factorial(n))
end

permutations(n::Integer) = permutations(collect(1:n))

# предполагается, что матрица квадратная
function enhance_matrix!(G::Vector{Vector{Any}})
    n = length(G)
    for i in 1:n
        for j in (i+1):n
            if G[i][j] == nothing
                G[i][j] = Inf
            end
        end
    end
    return G
end

function kommivoyager(G::Vector{Vector{Any}})
    n = length(G)
    min_sum = Inf
    curr_sum = 0
    min_permute = collect(1:n)
    for p in permutations(n)
        for i in 1:(n-1)
            if G[p[i]][p[i+1]] == Inf
                break
            else
                curr_sum += G[p[i]][p[i+1]]
            end
        end
        if curr_sum < max_sum
            max_sum = curr_sum
            min_permute = p
        end
    end
    return min_permute
end

function ford_bellman(G::AbstractMatrix, s::Integer)
    n = size(G,1)
    C = G[s,:] # - соотв. числу пересадок k = 0
    
    #ИНВАРИАНТ: С[j] = мин.ст.проезда из 1-ой вер. в j-ю c не более чем c k пересадками
    for k in 1:n-2, j in 2:n
        C[j] = min(C[j], minimum(C .+ G[:,j]))
    end
    return C
end

function ford_bellman(G::AbstractMatrix, s::Integer)
    n = size(G,1)
    C = G[s,:]
    min_C = similar(C) # - захват памяти под min_C нужного размера без инициализации
    for k in 1:n-2
        for j in 2:n
            min_C[j] = C[j]
            for i in 1:n
                if min_C[j] > C[i] + G[i,j]
                    min_C[j] = C[i].+ G[i,j]
                end
            end
        end
        C = min_C
    end
    return C
end

function ford_bellman(G::AbstractMatrix, s::Integer)
    n = size(G,1)
    C = G[s,:]
    for k in 1:n-2, j in 2:n, i in 1:n
        if C[j] > C[i] + G[i,j]
            C[j] = C[i] + G[i,j]
        end
    end
    return C
end

function ford_bellman_prev(G::AbstractMatrix, s::Integer)
    n = size(G,1)
    prev = zeros(Int, n-1, n)
    C = repeat(G[s,:], n-1) # - соотв. числу пересадок k-1 = 0
    for k in 2:n-1, j in 2:n, i in 1:n
        if C[k,i] > C[k,i] + G[i,j]
            C[k,j] = C[k,i] + G[i,j]
            prev[k,j] = i
        end
    end
    return C, prev 
end

function optpath_ford_bellman(prev::Matrix, j::Integer, k_max = size(prev,1))
    path=Vector{Int}(undef, k_max)
    k = size(prev,1)
    while prev[k,j]==0
        k-=1
    end
    k=min(k,k_max)
    while j != 0 # k > 0
        path[k] = j
        j = prev[k,j]
        k -= 1
    end
    if k > 0
        return nothing # т.е. не существует оптимального пути КОНЕЧНОЙ стоимости (фактически отсутствует путь из s в j)
    end
    return path
end

function floyd(G::AbstractMatrix)
    n=size(A,1)
    C=Array{eltype(G),3}(undef,n,n,n)
    C[1,:,:]=G
    for k in 1:n, i in 1:n, j in 1:n
        C[k+1,i,j]=min(C[k,i,j], C[k,i,k]+C[k,k,j])
    end
    return C[end,:,:]
end

function floyd(G::AbstractMatrix)
    n=size(A,1)
    C=Array{eltype(G),2}(undef,n,n) # - это тоже самое, что и Matrix{eltype(G)}(undef,n,n)
    C=G
    for k in 1:n, i in 1:n, j in 1:n
        C[i,j]=min(C[i,j], C[i,k]+C[k,j])
    end
    return C
end

function floyd(G::AbstractMatrix)
    n=size(A,1)
    C=Array{eltype(G),2}(undef,n,n) # - это тоже самое, что и Matrix{eltype(G)}(undef,n,n)
    C=G
    for k in 1:n, i in 1:n, j in 1:n
        if C[i,j] > C[i,k]+C[k,k,j]
            C[i,j] = C[i,k]+C[k,j])
        end
    end
    return C
end
