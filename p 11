module Vector2Ds

    export Vector2D, xdot, sin, cos
    using LinearAlgebra # - чтобы стали доступными фунции dot (скалярное произведение), norm (длина вектора)

    Vector2D{T<:Real} = Tuple{T,T}

    Base. cos(a::Vector2D, b::Vector2D) = dot(a,b)/norm(a)/norm(b)
    xdot(a::Vector2D, b::Vector2D) = a[1]*b[2]-a[2]*b[1]
                # xdot(a,b)=|a||b|sin(a,b) - косое произведение
    Base. sin(a::Vector2D, b::Vector2D) = xdot(a,b)/norm(a)/norm(b)
end

using Plots

# задача 1
randpoints(random::Function, num::Integer) = [(random(),random()) for _ in 1:num]

# задача 2
points = randpoints(rand, 20)
scatter(points; legend = false)

# задача 3
function plotsegments(segments::Vector{Tuple{Point2D,Point2D}}; kwargs...)
    p=plot(;kwargs...)
    for s in segments
        plot!(collect(s); kwargs...)
    end
    return p
end

# задача 4
function segments_intersect(A₁::VectorXY,B₁::VectorXY{T},A₂::VectorXY{T},B₂::VectorXY{T}) where T
    A = [B₁[2]-A₁[2]  A₁[1]-B₁[1]
         B₂[2]-A₂[2]  A₂[1]-B₂[1]]

    b = [A₁[2]*(A₁[1]-B₁[1])+A₁[1]*(B₁[2]-A₁[2])
         A₂[2]*(A₂[1]-B₂[1])+A₂[1]*(B₂[2]-A₂[2])]

    x,y = A\b

    if isinner((x, y), A₁,B₁)==false || isinner((x, y), A₂,B₂)==false
        return nothing
    end

    return VectorXY{T}((x,y))
end

isinner(P,A,B) = (A.x <= P.x <= B.x || A.x >= P.x >= B.x) && 
                 (A.y <= P.y <= B.y || A.y >= P.y >= B.y)
